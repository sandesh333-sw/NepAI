name: Deploy to DigitalOcean Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: pulami
  IMAGE_NAME_BACKEND: nepai-backend
  IMAGE_NAME_FRONTEND: nepai-frontend
  NAMESPACE: nepai-prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No tests configured"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_ACCESS_TOKEN }}
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Login to Docker Hub
      run: echo ${{ secrets.DOCKER_API_KEY }} | docker login -u pulami --password-stdin
    
    - name: Save DigitalOcean kubeconfig
      run: doctl kubernetes cluster kubeconfig save nepai-cluster
    
    - name: Build and push backend image
      run: |
        cd backend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
    
    - name: Build and push frontend image
      run: |
        cd frontend
        docker build --build-arg VITE_API_URL=https://nepai.143.198.243.230.nip.io -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} .
        docker build --build-arg VITE_API_URL=https://nepai.143.198.243.230.nip.io -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
    
    - name: Deploy to DigitalOcean Kubernetes
      run: |
        # Update backend deployment with new image
        kubectl set image deployment/nepai-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} -n ${{ env.NAMESPACE }}
        
        # Update frontend deployment with new image
        kubectl set image deployment/nepai-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} -n ${{ env.NAMESPACE }}
        
        # Wait for backend rollout to complete
        kubectl rollout status deployment/nepai-backend -n ${{ env.NAMESPACE }} --timeout=600s
        
        # Wait for frontend rollout to complete
        kubectl rollout status deployment/nepai-frontend -n ${{ env.NAMESPACE }} --timeout=600s
        
        # Verify deployments are healthy
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=nepai-backend
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=nepai-frontend
        
        # Show service status
        kubectl get services -n ${{ env.NAMESPACE }}
        
        # Show ingress status
        kubectl get ingress -n ${{ env.NAMESPACE }}
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸŽ‰ Deployment successful!"
        echo "ðŸš€ NepAI is now running on DigitalOcean Kubernetes"
        echo "ðŸ“Š Check your application at your configured domain"